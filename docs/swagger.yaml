openapi: 3.0.4
info:
  title: Scenic Spots API
  description: |-
    The “Scenic Spots API” project aims to enable intuitive communication with a client
    application by providing data about picturesque locations in a selected area — such as viewpoints, lakes, rivers, trails, and routes with beautiful scenery, as well as other types of “hidden natural gems.”
  contact:
    email: czxxxrny@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
  - url: https://google.com
tags:
  - name: spot
    description: All of the methods for the spots
  - name: review
    description: Methods for posting and getting reviews
  - name: photo
    description: Methods for spots photos
  - name: user
    description: Methods for user authentication and managment.

paths:
  ##################################################################################
  /spot:
    post:
      tags:
        - spot
      summary: Add a new spot.
      description: Adds a new spot. Requires longitude, latitude and a category of the spot. New spot is indexed automatically. Photos can be added later.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSpot"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          description: Invalid parameters
        "401":
          description: Validation error
        "409":
          description: Spot already exists in the database
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    get:
      tags:
        - spot
      summary: Get spots by the query parameters.
      description: Get all spots that match the criteria. No query parameters return all of the existing spots.
      parameters:
        - name: Name
          in: query
          description: Name of the spot (optional).
          schema:
            type: string
        - name: latitude
          in: query
          description: Latitude of the spot. Required if longitude is provided.
          schema:
            type: number
            format: float
        - name: longitude
          in: query
          description: Longitude of the spot. Required if latitude is provided.
          schema:
            type: number
            format: float
        - name: radius
          in: query
          description: Radius in kilometers around in specified latitude and longitude. Required if longitude and latitude are provided.
          schema:
            type: number
            format: float
        - name: category
          in: query
          description: Category of the spot (optional).
          schema:
            type: string
        - name: addedBy
          in: query
          description: Filter the response by username (optional).
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Spot"
        "400":
          description: Invalid parameters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /spot/{id}:
    patch:
      tags:
        - spot
      summary: Update an existing spot.
      description: Update an existing spot by Id.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the spot to retrieve.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSpot"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          description: Invalid parameters 
        "401":
          description: Validation error
        "403":
          description: Unauthorized to edit the asset
        "404":
          description: Spot not found
        "409":
          description: Spot already exists in the database
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    get:
      tags:
        - spot
      summary: Get a spot by its ID.
      description: Retrieve details of a specific spot using its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the spot to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully retrieved the spot
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Spot"
        "400":
          description: Invalid parameters
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    delete:
      tags:
        - spot
      summary: Delete a spot.
      description: Deletes a specific spot by its ID, deleting all of the images and reviews connected to it.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the spot to delete.
          schema:
            type: string
      responses:
        "204":
          description: Spot successfully deleted (no content)
        "400":
          description: Invalid parameters 
        "401":
          description: Validation error
        "403":
          description: Unauthorized to edit the asset
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /spot/{id}/photo:
    get:
      tags:
        - photo
      summary: Get photos for the spot.
      description: Get URLs of all of the photos of an existing spot.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the spot.
          schema:
            type: string
      responses:
        "200":
          description: List of photos URLs for the spot.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      type: string
                      format: uri
                    description: List of URLs to the uploaded photos.
        "400":
          description: Invalid parameters 
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    put:
      tags:
        - photo
      summary: Add photos to a spot.
      description: Add up to three photos to an existing spot.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the spot to which photos are added.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 3
      responses:
        "200":
          description: Successfully added photos to the spot.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      type: string
                      format: uri
                    description: List of URLs to the uploaded photos.
        "400":
          description: Invalid parameters 
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    delete:
      tags:
        - photo
      summary: Delete photos from a spot.
      description: Deletes specified photos from the spot. If no query parameters get passed, all of the photos get deleted.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the spot of which photos get deleted.
          schema:
            type: string
        - name: photoId
          in: query
          required: false
          description: If specified, deletes only this photo. If omitted, deletes all photos for the given spot.
          schema:
            type: string
      responses:
        "200":
          description: Successfully deleted the photos.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: ID of the deleted photo.
        "400":
          description: Invalid parameters 
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /spot/{id}/review:
    post:
      tags:
        - review
      summary: Add a review for a spot.
      description: Add a new review for a specific spot.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReview"
      responses:
        "201":
          description: Review created
        "400":
          description: Invalid parameters
        "401":
          description: Validation error
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    get:
      tags:
        - review
      summary: Get reviews for a specific spot.
      description: Get all reviews for a specific spot. Use limit query parameter to specify the amount of spots returned.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
          description: Number of reviews to return (default - all).
        - name: addedBy
          in: query
          description: Filter the response by username (optional).
          schema:
            type: string
      responses:
        "200":
          description: A list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "400":
          description: Invalid parameters
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    delete:
      tags:
        - review
      summary: Delete all reviews for a specific spot
      description: Deletes a of the reviews posted for specified spot.
      parameters:
        - name: spotId
          in: path
          required: true
          description: The ID of the spot to which the review belongs.
          schema:
            type: string
        - name: reviewId
          in: query
          required: true
          description: The ID of the review to delete.
          schema:
            type: string
      responses:
        "204":
          description: Review successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the deleted review.
        "400":
          description: Invalid parameters 
        "401":
          description: Validation error
        "403":
          description: Unauthorized to edit the asset
        "404":
          description: Review or spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /spot/{id}/review/{rId}:
    patch:
      tags:
        - review
      summary: Update an existing review.
      description: Update an existing review by its Id.
      parameters:
        - name: spotId
          in: path
          required: true
          description: The unique ID of the spot.
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewReview"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid parameters
        "401":
          description: Validation error
        "403":
          description: Unauthorized to edit the asset
        "404":
          description: Spot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    ##################################################################################
    get:
      tags:
        - review
      summary: Get a review by its ID.
      description: Retrieve details of a specific review using its unique ID.
      parameters:
        - name: spotId
          in: path
          required: true
          description: The unique ID of the spot.
          schema:
            type: integer
            format: int64
        - name: reviewId
          in: path
          required: true
          description: The unique ID of the review.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully retrieved the spot
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: Invalid spot id
        "404":
          description: Review not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - review
      summary: Delete a review.
      description: Deletes a specific review by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the review to delete.
          schema:
            type: string
      responses:
        "204":
          description: Spot successfully deleted (no content)
        "400":
          description: Invalid review ID
        "401":
          description: Validation error
        "403":
          description: Unauthorized to edit the asset
        "404":
          description: Review not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /user/register:
     post:
      tags:
        - user
      summary: Register new user.
      description: Pass user register info, create new user in database and get JWT token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterInfo"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTokenResponse"
        "400":
          description: Bad request body
        "401":
          description: Invalid credentials
        "409":
          description: Username/email already exist in the database
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /user/login:
    post:
      tags:
        - user
      summary: Login with user credentials.
      description: Pass user login credentials to get JWT token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTokenResponse"
        "400":
          description: Bad request body
        "401":
          description: Invalid credentials
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
  /user/{id}:
    delete:
      tags:
        - user
      summary: Delete user.
      description: Delete specified user. Requires JWT token with exact same user ID, or admin role.
      responses:
        "204":
          description: User successfully deleted (no content)
        "400":
          description: Invalid user ID
        "401":
          description: Validation error
        "403":
          description: Unauthorized to edit the asset
        "404":
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  ##################################################################################
components:
  schemas:
    ##################################################################################
    Spot:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          description: Posting users name for the spot.
          example: My special place.
        description:
          type: string
          description: Posting users description for the spot.
          example: Wonderfull spot near a river.
        latitude:
          type: number
          format: float
          example: 52.2297
        longitude:
          type: number
          format: float
          example: 21.0122
        category:
          type: string
          description: Specifies the type of the spot.
          example: Lake
        photos:
          type: array
          description: List of image URLs associated with this spot.
          items:
            type: string
            format: uri
            example: "https://example.com/photo1.jpg"
        userId:
          type: string
          description: User ID of the person who added the spot.
          example: "user_abc123"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-23T12:00:00Z"
    ##################################################################################
    NewSpot:
      type: object
      description: Used for adding new spots. Includes the same information as the Spot, excluding the ID as it is generated automatically by the API, photos - as they are added after the "raw" information, and addedBy (userID). Note that NewSpot is also used for updatin datag.
      properties:
        name:
          type: string
          description: Posting users name for the spot.
          example: My special place.
        description:
          type: string
          description: Posting users description for the spot.
          example: Wonderfull spot near a river.
        latitude:
          type: number
          format: float
          example: 52.2297
        longitude:
          type: number
          format: float
          example: 21.0122
        category:
          type: string
          description: Specifies the type of the spot.
          example: Lake
      required:
        - name
        - latitude
        - longitude
        - category
    ##################################################################################
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
    ##################################################################################
    UserRegisterInfo:
      type: object
      properties:
        name:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
      required:
        - name
        - email
        - password
    ##################################################################################
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
      required:
        - email
        - password
    ##################################################################################
    UserTokenResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
        localId:
          type: string
          example: "y9AHPDr0ywBovDlqfT7R"
      required:
        - email
        - password
    ##################################################################################
    Review:
      type: object
      properties:
        id:
          type: string
          example: "rev_abc123"
        spotId:
          type: string
          example: "spot_001"
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.5
        content:
          type: string
          example: "Wonderfull place!"
        addedBy:
          type: string
          example: "user_42"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-23T12:00:00Z"
    ##################################################################################
    NewReview:
      type: object
      required:
        - rating
        - comment
      properties:
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.0
        content:
          type: string
          example: "Worth visiting!"
    ##################################################################################
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
##################################################################################